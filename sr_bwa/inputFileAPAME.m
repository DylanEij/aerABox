% This function generates an APAME input file command given the geometry
%       Author  : Gabriel Buendia
%       Version : 1
% Inputs:
%         airspeed     -> Freestream reference speed [m/s]
%         density      -> Freestream density [kg/m^3]
%         pressure     -> Freestream pressure [Pa]
%         mach         -> Fresstream Mach number
%         cases        -> Number of cases to simulate in APAME
%         wingspan     -> Wingspan [m]
%         MAC          -> Mean aerodynamic chord [m]
%         surf         -> Surface area [m]
%         origin       -> Origin of coordinates [m]
%         method       -> Singularity method:
%                        0-constant source/doublet 
%                        1-constant doublet
%         err          -> Error
%         colldepth    -> Collocation point depth [m] 
%         farfield     -> Far field coefficient
%         collcalc     -> Collocation point calculation:
%                        0-approximate
%                        1-accurate
%         velorder     -> Interpolation method/order for velocity calculations:
%                        0-nodal
%                        1-first
%                        2-second
%         results      -> Result requests:
%                        0-no
%                        1-yes
%         requests     -> Type of request: [vector 1x13] specify 1 or 0
%                        1-coefficients
%                        2-forces
%                        3-geometry
%                        4-velocity
%                        5-pressure
%                        6-center points
%                        7-dipole values 
%                        8-source values
%                        9-velocity components
%                        10-mesh characteristics
%                        11-static pre> ->s>sure
%                        12-dynamic pressure 
%                        13-manometer pressure
%         numbernodes  -> Number of nodes that the geometry contains
%         nodes        -> Geometry and wake nodes matrix [Nodes x 3] specifying:
%                        [x_pos y_pos z_pos] x Nodes
%         numberpanels -> Number of panels that the geometry contains
%         panels       -> Geometry and wake panels matrix [Panels x 7] specifying:
%                        [Type Node1 Node2 Node3 Node4 Panel1 Panel2 Panel3 Panel4] x Panels
%                        Type: 1  -> Square | 10  -> Wake
%                        Node1234: Nodes enclosing the panel
%                        Panel1234: Panels surrounding the actual panel
% Outputs:
%          commandAPAME -> String containing the command for an APAME input file 
%                   to be written
function commandAPAME = inputFileAPAME(airspeed,density,pressure,mach,cases,wingspan,MAC,surf,origin,method,err,colldepth,farfield,collcalc,velorder,results,requests,numbernodes,nodes,numberpanels,panels)
[~,l_case] = size(cases); l_req = length(requests);
[r_nod, c_nod] = size(nodes); [r_pan, c_pan] = size(panels);
x0 = origin(1);
y0 = origin(2);
z0 = origin(3);
string = append('CASE_NUM ',num2str(l_case),'\n');
string1 = '';
string2 = '';
for i = 1:l_case
    if i < l_case
        string1 = append(string1,num2str(cases(1,i)),' ');
        string2 = append(string2,num2str(cases(2,i)),' ');
    else
        string1 = append(string1,num2str(cases(1,i)),'\n');
        string2 = append(string2,num2str(cases(2,i)),'\n');
    end
end
cases = append(string,string1,string2);
string3 = '';
for i = 1:r_nod
    for j = 1:c_nod
        if j < c_nod
            string3 = append(string3,num2str(nodes(i,j)),' ');
        else
            string3 = append(string3,num2str(nodes(i,j)),'\n');
        end
    end
end
nodes = string3;
string5 = '';
for i = 1:r_pan
    for j = 1:c_pan
        if j < c_pan
            if isnan(panels(i,j))
                string5 = append(string5,' ');
            else
                string5 = append(string5,num2str(panels(i,j)),' ');
            end
        else
            if isnan(panels(i,j))
                string5 = append(string5,'\n');
            else
                string5 = append(string5,num2str(panels(i,j)),'\n');
            end
        end
    end
end
panels = string5; 
commandAPAME = append(['APAME input file\n'...
    'VERSION 3.1\n'...
    '# FLOW PARAMETERS\n'...
    '# airspeed [m/s]\n'...
    'AIRSPEED ',num2str(airspeed),'\n' ...
    '# air density [kg/m^3]\n' ...
    'DENSITY ',num2str(density),'\n' ...
    '# atmospheric pressure [Pa]\n' ...
    'PRESSURE ',num2str(pressure),'\n' ...
    '# prandtl-glauert correction:\n' ...
    '# 0-no correction\n' ...
    '# *-Mach number\n' ...
    'MACH ',num2str(mach),'\n' ...
    '# number of cases\n' ...
    '# angles of attack [degrees]\n' ...
    '# sideslip angles [degrees]\n' ...
    cases, ...
    '# REFERENCE VALUES\n' ...
    '# wing span [m]\n' ...
    'WINGSPAN ',num2str(wingspan),'\n' ...
    '# mean aerodynamic chord [m]\n' ...
    'MAC ',num2str(MAC),'\n' ...
    '# wing surface [m^2]\n' ...
    'SURFACE ',num2str(surf),'\n' ...
    '# reference point [m]\n' ...
    'ORIGIN *\n' ...
    num2str(x0),' ',num2str(y0),' ',num2str(z0),'\n' ...
    '# SOLVER PARAMETERS\n' ...
    '# singularity method:\n' ... 
    '# 0-constant source/doublet\n' ...
    '# 1-constant doublet\n' ...
    'METHOD ',num2str(method),'\n' ...
    '# error\n' ...
    'ERROR ',num2str(err),'\n' ...
    '# collocation point depth\n' ...
    'COLLDIST ',num2str(colldepth),'\n' ...
    '# "far field" coefficient\n' ...
    'FARFIELD ',num2str(farfield),'\n'...
    '# collocation point calculation:\n' ...
    '# 0-approximate\n' ...
    '# 1-accurate\n' ...
    'COLLCALC ',num2str(collcalc),'\n' ...
    '# interpolation method/order for velocity calculations:\n' ...
    '# 0-nodal\n' ...
    '# 1-first\n' ...
    '# 2-second\n' ...
    'VELORDER ',num2str(velorder),'\n' ...
    '# RESULT REQUESTS\n' ...
    '# 0-no\n' ...
    '# 1-yes\n' ...
    '# RESULTS <1> or <0> (yes or no will the result file be written)\n' ...
    'RESULTS ',num2str(results),'\n' ...
    '#  1 coefficients\n' ...
    'RES_COEF ',num2str(requests(1)),'\n' ...
    '#  2 forces\n' ...
    'RES_FORC ',num2str(requests(2)),'\n' ...
    '#  3 geometry\n' ...
    'RES_GEOM ',num2str(requests(3)),'\n' ...
    '#  4 velocity\n' ...
    'RES_VELO ',num2str(requests(4)),'\n' ...
    '#  5 pressure\n' ...
    'RES_PRES ',num2str(requests(5)),'\n' ...
    '#  6 center points\n' ...
    'RES_CENT ',num2str(requests(6)),'\n' ...
    '#  7 dipole values\n' ...
    'RES_DOUB ',num2str(requests(7)),'\n' ...
    '#  8 source values\n' ...
    'RES_SORC ',num2str(requests(8)),'\n' ...
    '#  9 velocity components\n' ...
    'RES_VELC ',num2str(requests(9)),'\n' ...
    '# 10 mesh characteristics\n' ...
    'RES_MESH ',num2str(requests(10)),'\n' ...
    '# 11 static pressure\n' ...
    'RES_STAT ',num2str(requests(11)),'\n' ...
    '# 12 dynamic pressure\n' ...
    'RES_DYNA ',num2str(requests(12)),'\n' ...
    '# 13 manometer pressure\n' ...
    'RES_MANO ',num2str(requests(13)),'\n' ...
    '# 1 2 3 4 5 6 7 8 9 10 11 12 13\n' ...
    '# GEOMETRY\n' ...
    '# x y z [m]\n' ...
    'NODES ',num2str(numbernodes),'\n' ...
    nodes, ...
    '# type node_id1 node_id2 node_id3 [node_id4] elem_id1 [elem_id2 [elem_id3 [elem_id4]]]\n' ...
    'PANELS ',num2str(numberpanels),'\n' ...
    panels, ...
    '# end of input file\n']);
